// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // Use your NeonDB or other PostgreSQL URL
}

model User {
  id         String        @id @default(cuid())
  email      String        @unique
  role       UserRole      @default(USER)
  enrollments Enrollment[]
}

model Course {
  id          String      @id @default(cuid())
  title       String
  description String?
  price       Int         // In cents (e.g., 20000 = 200 USD)
  sections    Section[]
  enrollments Enrollment[]
}

model Section {
  id         String        @id @default(cuid()) 
  title      String
  courseId   String
  course     Course        @relation(fields: [courseId], references: [id])
  videos     Video[]       // This is a one-to-many relation, so use Video[]
  pdfs       PDFResource[]
  test       Test?
}

model Video {
  id         String      @id @default(cuid())
  title      String
  cloudinaryUrl String   // Cloudinary URL where the video is stored
  sectionId  String
  section    Section     @relation(fields: [sectionId], references: [id])
}

model PDFResource {
  id         String      @id @default(cuid())
  title      String
  cloudinaryUrl String   // Cloudinary URL where the PDF is stored
  sectionId  String
  section    Section     @relation(fields: [sectionId], references: [id])
}

model Enrollment {
  id         String   @id @default(cuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  courseId   String
  course     Course   @relation(fields: [courseId], references: [id])
  startDate  DateTime @default(now())
  endDate    DateTime
  isActive   Boolean  @default(true)
}

model Test {
  id         String      @id @default(cuid())
  title      String
  questions  String      // Can be JSON or a simple text description
  sectionId  String      @unique
  section    Section     @relation(fields: [sectionId], references: [id])
}

enum UserRole {
  ADMIN
  USER
}
